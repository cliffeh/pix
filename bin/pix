#!/bin/bash

ok_color=""
err_color=""
end_color=""
delay=0
sync=

read -rd '' USAGE << EOF
usage: pix [OPTIONS] COMMAND [-- ARGS]

  COMMAND will be run on each host in the PIHOSTS environment variable;
  ARGS coming after the -- will be passed into COMMAND rather than being
  evaluated by pix itself

  PIHOSTS should be a comma-delimited list of hostnames

example:

  $ export PIHOSTS="pi1 pi2 pi3 pi4"
  $ pix uname -n -- -r -v -m -o
  pi3: pi3 6.6.47+rpt-rpi-v8 aarch64 GNU/Linux
  pi2: pi2 6.6.47+rpt-rpi-v8 aarch64 GNU/Linux
  pi4: pi4 6.6.47+rpt-rpi-v8 aarch64 GNU/Linux
  pi1: pi1 6.6.47+rpt-rpi-v8 aarch64 GNU/Linux

options:
  -c, --color    colorize output
  -d, --delay N  delay N seconds between running on each host
  -s, --sync     wait for each host to finish before running on the next one
  -h, --help     print a brief help message and exit
EOF

if [[ -z "${PIHOSTS}" ]] ; then
    echo "error: PIHOSTS environment variable not set" 1>&2
    echo "${USAGE}" 1>&2
    exit 1
fi
read -r -a HOSTS <<< "$PIHOSTS"

function prepend_stdout()
{
    while read -r line; do
        printf "${ok_color}%-8s%s${end_color}\n" "$1:" "${line}"
    done   
}

function prepend_stderr()
{
    while read -r line; do
        printf "${err_color}%-8s%s${end_color}\n" "$1:" "${line}" 1>&2
    done
}

[[ -z $1 ]] && echo "$USAGE" && exit 1

cmd=()  # everything up to the --
while [[ -n $1 ]] ; do
    case $1 in
	--) break
	    ;;
    -c|--color)
        ok_color="\033[32m"
        err_color="\033[31m"
        end_color="\033[0m"
        ;;
    -d|--delay)
        if [ -z "$2" ]; then
            echo "error: $1 requires an argument" 1>&2
            echo "${USAGE}" 1>&2
            exit 1
        fi
        shift # shift the flag, the argument will be shifted below
        delay=$1
        ;;
    -s|--sync)
        sync=true
        ;;
    -h|--help)
        echo "$USAGE"
        exit 0
        ;;
	*) cmd+=("$1")
	    ;;
    esac
    shift
done
shift

args=()  # everything after the --
while [[ -n $1 ]] ; do
    args+=("$1")
    shift
done

pids=()

for host in "${HOSTS[@]}"; do
    if [[ -z "$sync" ]] ; then
        # shellcheck disable=SC2029
        ssh "$host" "${cmd[@]}" "${args[@]}" 1> >(prepend_stdout "$host") 2> >(prepend_stderr "$host") &
        pids+=("$!")
    else
        # shellcheck disable=SC2029
        ssh "$host" "${cmd[@]}" "${args[@]}" 1> >(prepend_stdout "$host") 2> >(prepend_stderr "$host")
    fi
    sleep "$delay"
done


# wait for all pids
for pid in "${pids[@]}"; do
    wait "$pid"
done
